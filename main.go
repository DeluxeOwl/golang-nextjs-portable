package main

import (
	"embed"
	"fmt"
	"io/fs"
	"log"
	"net/http"
	"runtime/pprof"
	"strings"

	"github.com/cespare/xxhash"
)

const StaticFilesRoot = "nextjs/dist"

var cache = make(map[string]uint64)

//go:embed nextjs/dist
//go:embed nextjs/dist/_next
//go:embed nextjs/dist/_next/static/chunks/pages/*.js
//go:embed nextjs/dist/_next/static/*/*.js
var nextFS embed.FS

func main() {

	// Root at the `dist` folder generated by the Next.js app.
	distFS, err := fs.Sub(nextFS, StaticFilesRoot)
	if err != nil {
		log.Fatal(err)
	}

	// The static Next.js app will be served under `/`.
	http.Handle("/", cacheFileserver(http.FileServer(http.FS(distFS))))
	// The API will be served under `/api`.
	http.HandleFunc("/api", handleAPI)

	// Start HTTP server at :8080.
	log.Println("Starting HTTP server at http://localhost:8080 ...")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func cacheFileserver(fs http.Handler) http.HandlerFunc {

	return func(w http.ResponseWriter, r *http.Request) {

		path := r.URL.Path

		if etag, ok := cache[path]; !ok {
			filename := StaticFilesRoot + path
			file, err := nextFS.ReadFile(filename)
			if err != nil {
				log.Printf("Error: Failed to read file at %s: %v", filename, err)
			} else {
				cache[path] = xxhash.Sum64(file)
			}
		} else {

			etagStr := fmt.Sprint(etag)

			w.Header().Set("Cache-Control", "max-age=3600")
			w.Header().Set("Etag", etagStr)

			if match := r.Header.Get("If-None-Match"); match != "" {
				if strings.Contains(match, etagStr) {
					w.WriteHeader(http.StatusNotModified)
					return
				}
			}
		}

		fs.ServeHTTP(w, r)
	}
}

func handleAPI(w http.ResponseWriter, _ *http.Request) {
	// Gather memory allocations profile.
	profile := pprof.Lookup("allocs")

	// Write profile (human readable, via debug: 1) to HTTP response.
	err := profile.WriteTo(w, 1)
	if err != nil {
		log.Printf("Error: Failed to write allocs profile: %v", err)
	}
}
